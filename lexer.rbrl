%%{ #%

# Character classes are in lowercase. e.g.: eof
# Machines/scanners are in uppercase. e.g.: EXPR_BEG
# Actions are in CamelCase. e.g.: DoEof

# The first state is BOF (beginning of file)

machine Lex;
access @;
variable p @p;
getkey peek; # not the most efficient

# ------------------------------------------------------------------------------
#
# Character Classes
#

action NewLine {
  # NewLine
  if @line_jump > @p
    fexec @line_jump;
  end
}

action TokStart { lts = @p }
action TokEnd   { lte = @p }

c_eof   = 0; # Lexer already excludes 0x4 and 0x1A (^D | ^Z)
nl      = '\n' @NewLine;
ws      = ( (space - nl) | ('\\' nl) ) %TokStart;
nl_eof  = nl | c_eof;
nl_ws   = nl | ws;
unicode = ^ascii;

ident_start = lower | '_' | unicode;
ident_char  = alnum | '_' | unicode;

string_term = [QqWwIixrs];


#-------------------------------------------------------------------------------
#
# Actions
#

action Keyword {
  # Keyword
  keyword_token(token_type, lts, lte, next_state)
  fbreak;
}

action Number {
  gen_number_token(token_type, num_base, num_flags || [], ts: lts >= 0 ? lts : @ts)
  if fcalled_by?(COMMON_EXPR, reject: false)
    pop_fcall
  end
  fnext EXPR_END;
  fbreak;
}

action StringStart {
  # StringStart
  if lte >= 0
    fexec @te = lte;
  end
  gen_literal_token(lts >= 0 ? lts : @ts)
  push_fcall unless @cs == COMMON_EXPR # this is so that strings can identify who called them if needed
  fnext *@literals.last.state;
  fbreak;
}


# ------------------------------------------------------------------------------
#
# Comments
#

# TODO: magic comments

line_comment = '#' ^nl_eof*;

action EmbDocEof { raise SyntaxError, 'embedded document meets end of file' }

block_trail = (space - nl) ^nl*;

block_comment =
  '=begin' block_trail? nl
  (
    (any* nl)*
    :>>
    '=end' block_trail? nl_eof
  ) @err(EmbDocEof)
;

# Expressions that must be at the beginning of a line.
bol = block_comment | '__END__' nl_eof;


# ------------------------------------------------------------------------------
#
# Numerics
#

# TODO: error => numeric literal without digits

action RacSuf { (num_flags ||= []) << :rational }
action CmxSuf { (num_flags ||= []) << :imaginary }
action IntNum { token_type = :tINTEGER }
action FloNum { token_type = :tFLOAT }
action TrailError { raise SyntaxError, "trailing `_' in number" }

bdigit = [01];
odigit = [0-7];

# digits with leading `_' like in 1_000_00
ubdigits = bdigit ( '_'? bdigit )* ('_' %TrailError)? ;
uodigits = odigit ( '_'? odigit )* ('_' %TrailError)? ;
uddigits =  digit ( '_'?  digit )* ('_' %TrailError)? ;
uxdigits = xdigit ( '_'? xdigit )* ('_' %TrailError)? ;

bin_number  =   '0' [bB]   ubdigits % { num_base =  2 };
oct_number  =   '0' [oO_]? uodigits % { num_base =  8 };
dec_number  =   '0' [dD]   uddigits % { num_base = 10 };
hex_number  =   '0' [xX]   uxdigits % { num_base = 16 };
int_number  = ( '0' | [1-9] ( '_'? digit )* ) ('_' %TrailError)? % { num_base = 10 };

sign = [+\-];

real_frac = '.' uddigits;
real_exp  = [eE] sign? uddigits;


real_number =
  int_number
  (
      real_exp
    | real_frac ( real_exp | ('r' %RacSuf)? )?
  ) %FloNum
;

rationable_number = (
    bin_number
  | oct_number
  | dec_number
  | hex_number
  | int_number
) %IntNum ('r' %RacSuf)? ;

number = ( rationable_number | real_number ) ('i' %CmxSuf)? ;


# ------------------------------------------------------------------------------
#
# Sign +/-
#

action UnaryOp {
  lts = @ts if lts < 0
  fexec @te = lts + 1;
  gen_token(token_type, ts: lts)
  fnext EXPR_BEG;
  fbreak;
}

e_beg_sign =
    '+' %TokStart number %Number
  | (
      '+' [^=0-9]  % { token_type = :kUPLUS }
    | '-' [^=>0-9] % { token_type = :kUMINUS }
    | '-' digit    % { token_type = :kUMINUS_NUM }
  ) %UnaryOp
;

e_arg_sign =
  ws+ (
      '+' %TokStart number %Number
    | (
        '+' ^(space | [=0-9])  % { token_type = :kUPLUS }
      | '-' ^(space | [=>0-9]) % { token_type = :kUMINUS }
      | '-' digit % { token_type = :kUMINUS_NUM }
    ) %UnaryOp
  )
;


# ------------------------------------------------------------------------------
#
# Percent strings
#

# MRI accepts a unicode code byte as string initiator
# but then gives an error when trying to close,
# or if the unicode is invalid.
# In here, unicode is explicitly disabled.
percent_string = '%' string_term? (
    c_eof @{ raise SyntaxError, 'unknown type of %string' }
  | (ascii - alnum) @lerr{ raise SyntaxError, 'unknown type of %string' }
);


# ------------------------------------------------------------------------------
#
# Heredocs
#

action Heredoc {
  lit = gen_heredoc_token(lts >= 0 ? lts : @ts)
  fexec lit.content_start = next_bol!;
  push_fcall
  fnext HEREDOC_DELIMITER;
  fbreak;
}

action UnterminatedHeredoc { raise SyntaxError, 'unterminated here document identifier' }

# This is different from MRI: MRI accepts \n in identifiers,
# but then it can't find the identifier anywhere after. (MRI bug)
# In this case, \n isn't accepted in identifiers.
# There is no interpolation inside the identifier.
# Heredocs of type <<' have no interpolation in content.
heredoc_ident = '<<' [~\-]? (
    ident_char+
  | '"' ^('"' | nl_eof)* '"' @lerr(UnterminatedHeredoc)
  | "'" ^("'" | nl_eof)* "'" @lerr(UnterminatedHeredoc)
  | '`' ^('`' | nl_eof)* '`' @lerr(UnterminatedHeredoc)
);


# ------------------------------------------------------------------------------
#
# Identifiers
#

reserved_ident = 'alias'
               | 'and'
               | 'begin'
               | 'break'
               | 'case'
               | 'class'
               | 'def'
               | 'do'
               | 'else'
               | 'elsif'
               | 'end'
               | 'ensure'
               | 'false'
               | 'for'
               | 'if'
               | 'in'
               | 'module'
               | 'next'
               | 'nil'
               | 'not'
               | 'or'
               | 'redo'
               | 'rescue'
               | 'retry'
               | 'return'
               | 'self'
               | 'super'
               | 'then'
               | 'true'
               | 'undef'
               | 'unless'
               | 'until'
               | 'when'
               | 'while'
               | 'yield'
               | '__ENCODING__'
               | '__FILE__'
               | '__LINE__'
;

reserved_const = 'BEGIN' | 'END';
reserved_fid   = 'defined?' %TokEnd [^=];

reserved = ( reserved_ident | reserved_const | reserved_fid ) % { token_type = RESERVED };

identifier  = ( (ident_start ident_char*) - reserved_ident ) % { token_type = :tIDENTIFIER };
constant    = ( (upper       ident_char*) - reserved_const ) % { token_type = :tCONSTANT };
fid         = ( ((ident_start | upper) ident_char*) - reserved_fid ) [?!] %TokEnd [^=] % { token_type = :tFID };
setter_name = ( ident_start | upper ) ident_char* '=' %TokEnd ( [^~=>] | '=>' ) % { token_type = :tIDENTIFIER };

any_ident   = identifier | constant | fid;

# don't put token_type = :tLABEL, because it may be refused if @in_cmd == true
label = (
    ( identifier | constant | reserved_ident | reserved_const ) ':'
  | (fid | reserved_fid) & (any+ ':')
) %TokEnd [^:];

bref_char = [&+``''];
back_ref  = '$' bref_char % { token_type = :tBACK_REF };

# TODO: if it doesn't fit a Fixnum, give warning.
#       See parse_numvar.
#       Don't give warning in EXPR_FNAME.
nth_ref  = '$' [1-9] digit* % { token_type = :tNTH_REF };

gvar_char = [~*$?!@/\\;,.=:<>""];

invalid_gvar = ^(
    ident_char
  | gvar_char
  | bref_char
  | space
  | c_eof
  | [1-9\-]
);

gvar = '$' (
    '-' ident_char
  | ( ident_char - [1-9] ) ident_char*
  | gvar_char
  | (space | c_eof) @ { raise SyntaxError, "`$' without identifiers is not allowed as a global variable name" }
  #| invalid_gvar @ { raise SyntaxError, "`#{current_token}' is not allowed as a global variable name" }
) >err { raise SyntaxError, "`#{current_token}' is not allowed as a global variable name" } % { token_type = :tGVAR };

var = (
    (ident_char - digit) ident_char*
  | ( digit | ^ident_char ) % {
      tok = current_token
      type_str = token_type == :tIVAR ? 'n instance' : ' class'
      raise SyntaxError, "`#{tok}' is not allowed as a#{type_str} variable name"
    }

  | ( c_eof | space ) % {
      tok = current_token(te: @te - 1)
      type_str = token_type == :tIVAR ? 'n instance' : ' class'
      raise SyntaxError, "`#{tok}' without identifiers is not allowed as a#{type_str} variable name"
    }
);

ivar = '@' % { token_type = :tIVAR } var;
cvar = '@@' % { token_type = :tCVAR } var;

any_var =
    back_ref
  | nth_ref
  | gvar
  | cvar
  | ivar
;

op_asgn = '&&='
        | '&='
        | '**='
        | '*='
        | '||='
        | '|='
        | '+='
        | '-='
        | '/='
        | '^='
        | '%='
        | '<<='
        | '>>='
;

# Expressions common to EXPR_DOT and EXPR_FNAME
operator_expr = (
    # same op as COMMON_EXPR
    '!=' | '!~' | '!'
  | '===' | '==' | '=~' | '=>' | '='
  | '<=>' | '<=' | '<'
  | '>=' | '>'
  | '~'

    # similar to COMMON_EXPR
  | '**' %TokEnd [^=]   % { token_type = OPERATORS }
  | '*'  %TokEnd [^=]   % { token_type = OPERATORS }
  | '+'  %TokEnd [^=]   % { token_type = OPERATORS }
  | '-'  %TokEnd [^=]   % { token_type = OPERATORS }
  | '&'  %TokEnd [^&.=] % { token_type = OPERATORS }
  | '<<' %TokEnd [^=]
  | '>>' %TokEnd [^=]
  | '|'  %TokEnd [^|=]
  | '/'  %TokEnd [^=]
  | '^'  %TokEnd [^=]
  | '%'  %TokEnd [^=]
  | '[' % { token_type = OPERATORS }

    # unique to operator_expr
  | '+@' | '-@' | '!@' | '~@'
  | '[]' | '[]='
) % { next_state = EXPR_ARG };


#
# Machines #####################################################################
#


#
# Main/Entry - Beginning of File  ----------------------------------------------
#

action RetryBeg { fexec 0; fgoto EXPR_BEG; }
action GotoBeg { fgoto EXPR_BEG; }

BOF := bol @err(RetryBeg) @GotoBeg;

empty_lines = nl bol? (ws* nl bol?)*;


#
# Expressions ------------------------------------------------------------------
# Expressions are not callable.
# They are transitioned to through fnext or fgoto.

EXPR_BEG := |*

  empty_lines;

  e_beg_sign;

  '/' => StringStart;

  percent_string => StringStart;

  heredoc_ident => Heredoc;

  (
      '::'
    | ( '**' | '*' ) %TokEnd [^=]
    | '&' %TokEnd [^&.=]
    | '('
    | '['
    | label % {
        if @in_cmd
          # label not allowed
          lte -= 1 # remove trailing ':'
          next_state = EXPR_CMDARG if token_type != KEYWORDS
        else
          token_type = :tLABEL
          next_state = EXPR_LABELARG
        end
      }
    | reserved
    | any_ident % { next_state = @in_cmd ? EXPR_CMDARG : EXPR_ARG }

  ) => Keyword;

  any => { fhold; fcall COMMON_EXPR; };

*|;


EXPR_ARG := |*
  # TODO: EXPR_ARG is always accepting EXPR_LABEL. Verify when not to allow EXPR_LABEL with EXPR_ARG

  ws+ heredoc_ident => Heredoc;

  e_arg_sign;

  ws+ '/' %TokEnd ^(space | '=') => StringStart;

  ws+ percent_string - (any* '=') => StringStart;

  ws+ '::' => Keyword;

  ws+ ( '**' | '*' ) %TokEnd ^(space | '=') => Keyword;

  ws+ '&' %TokEnd ^(space | [&.=]) => Keyword;

  # exclude '?\\\n': it resolves to '\n' as if '?\\n'
  '?' %TokEnd space => Keyword;

  ws+ '(' % { token_type = :kLPAREN_ARG } => Keyword;

  ws+ '[' => Keyword;

  '{' % {
    if @lpar_beg > 0 && @lpar_beg == @paren_nest
      @lpar_beg = 0
      @paren_nest -= 1
      token_type = :kLAMBEG
    else
      @in_cmd = true
      token_type = OPERATORS
    end
  } => Keyword;

  label % { token_type = :tLABEL; next_state = EXPR_LABELARG } => Keyword;

  reserved => Keyword;

  any_ident % { next_state = @in_cmd ? EXPR_CMDARG : EXPR_ARG } => Keyword;

  any => { fhold; fcall COMMON_EXPR; };

*|;


EXPR_CLASS := |*

  empty_lines;

  e_beg_sign;

  '/' => StringStart;

  percent_string => StringStart;

  (
      '::'
    | ( '**' | '*' ) %TokEnd [^=]
    | ( '<=>' | '<=' | '<' | '<<' %TokEnd [^=] ) % { @in_cmd = true }
    | '&' %TokEnd [^&.=]
    | '('
    | '['
    | reserved
    | any_ident % { next_state = @in_cmd ? EXPR_CMDARG : EXPR_ARG }

  ) => Keyword;

  any => { fhold; fcall COMMON_EXPR; };

*|;


EXPR_CMDARG := |*

  e_arg_sign;

  ws+ '/' %TokEnd ^(space | '=') => StringStart;

  ws+ percent_string - '%=' => StringStart;

  ws+ heredoc_ident => Heredoc;

  ws+ '::' => Keyword;

  ws+ ( '**' | '*' ) %TokEnd ^(space | '=') => Keyword;

  ws+ '&' %TokEnd ^(space | [&.=]) => Keyword;

  # exclude '?\\\n': it resolves to '\n' as if '?\\n'
  '?' %TokEnd space => Keyword;

  ws+ '(' % { token_type = :kLPAREN_ARG } => Keyword;

  ws+ '[' => Keyword;

  '{' % {
    if @lpar_beg > 0 && @lpar_beg == @paren_nest
      @lpar_beg = 0
      @paren_nest -= 1
      token_type = :kLAMBEG
    else
      @in_cmd = true
      token_type = OPERATORS
    end
  } => Keyword;

  label % { token_type = :tLABEL; next_state = EXPR_LABELARG } => Keyword;

  reserved => Keyword;

  any_ident % { next_state = @in_cmd ? EXPR_CMDARG : EXPR_ARG } => Keyword;

  any => { fhold; fcall COMMON_EXPR; };

*|;


EXPR_DOT := |*

  empty_lines;

  operator_expr => Keyword;

  '`' % { next_state = @in_cmd ? EXPR_CMDARG : EXPR_ARG } => Keyword;

  (
      any_ident
    | reserved_ident % { token_type = :tIDENTIFIER }
    | reserved_const % { token_type = :tCONSTANT }
    | reserved_fid   % { token_type = :tFID }
  ) % { next_state = @in_cmd ? EXPR_CMDARG : EXPR_ARG } => Keyword;

  any => { fhold; fcall COMMON_EXPR; };

*|;


EXPR_END := |*

  ':' %TokEnd [^:] => Keyword;

  '?' => Keyword;

  '{' % {
    if @lpar_beg > 0 && @lpar_beg == @paren_nest
      @lpar_beg = 0
      @paren_nest -= 1
      token_type = :kLAMBEG
    else
      @in_cmd = true
      token_type = OPERATORS
    end
  } => Keyword;

  reserved => Keyword;

  any_ident % { next_state = EXPR_END } => Keyword;

  any => { fhold; fcall COMMON_EXPR; };

*|;


EXPR_ENDARG := |*

  ':' %TokEnd [^:] => Keyword;

  '?' => Keyword;

  '{' % {
    if @lpar_beg > 0 && @lpar_beg == @paren_nest
      @lpar_beg = 0
      @paren_nest -= 1
      token_type = :kLAMBEG
    else
      @in_cmd = true
      token_type = :kLBRACE_ARG
    end
  } => Keyword;

  reserved => Keyword;

  any_ident % { next_state = EXPR_END } => Keyword;

  any => { fhold; fcall COMMON_EXPR; };

*|;


EXPR_ENDFN := |*

  ':' %TokEnd [^:] => Keyword;

  '?' => Keyword;

  '{' % {
    if @lpar_beg > 0 && @lpar_beg == @paren_nest
      @lpar_beg = 0
      @paren_nest -= 1
      token_type = :kLAMBEG
    else
      @in_cmd = true
      token_type = OPERATORS
    end
  } => Keyword;

  label % {
    if @in_cmd
      # label not allowed
      lte -= 1 # remove trailing ':'
      next_state = EXPR_CMDARG unless token_type == KEYWORDS
    else
      token_type = :tLABEL
      next_state = EXPR_LABELARG
    end
  } => Keyword;

  reserved => Keyword;

  any_ident % { next_state = EXPR_ENDFN } => Keyword;

  any => { fhold; fcall COMMON_EXPR; };

*|;


EXPR_FNAME := |*

  empty_lines;

  heredoc_ident => Heredoc;

  back_ref | nth_ref => {
    gen_token(:tGVAR)
    fnext EXPR_END;
    fbreak;
  };

  (
      operator_expr
    | '`' % { next_state = EXPR_ENDFN }
    | reserved
    | any_ident % { next_state = EXPR_ENDFN }
  ) => Keyword;

  any => { fhold; fcall COMMON_EXPR; };

*|;


# Equivalent to EXPR_ARG|EXPR_LABELED in MRI.
EXPR_LABELARG := |*

  empty_lines => {
    if @in_kwarg
      @in_cmd = true
      gen_token(:kNL, token: "\n")
      fnext EXPR_BEG;
      fbreak;
    end
  };

  heredoc_ident => Heredoc;

  e_beg_sign;

  '/' => StringStart;

  percent_string => StringStart;

  '::' => Keyword;

  ( '**' | '*' ) %TokEnd [^=] => Keyword;

  '&' %TokEnd [^&.=] => Keyword;

  # exclude '?\\\n': it resolves to '\n' as if '?\\n'
  '?' %TokEnd space => Keyword;

  '(' => Keyword;

  '[' => Keyword;

  label % { token_type = :tLABEL; next_state = EXPR_LABELARG } => Keyword;

  reserved => Keyword;

  any_ident % { next_state = @in_cmd ? EXPR_CMDARG : EXPR_ARG } => Keyword;

  any => { fhold; fcall COMMON_EXPR; };

*|;


EXPR_MID := |*

  e_beg_sign;

  heredoc_ident => Heredoc;

  '/' => StringStart;

  percent_string => StringStart;

  '::' => Keyword;

  ( '**' | '*' ) %TokEnd [^=] => Keyword;

  '&' %TokEnd [^&.=] => Keyword;

  '(' => Keyword;

  '[' => Keyword;

  reserved => Keyword;

  any_ident % { next_state = @in_cmd ? EXPR_CMDARG : EXPR_ARG } => Keyword;

  any => { fhold; fcall COMMON_EXPR; };

*|;


# ------------------------------------------------------------------------------
#
# Shared expressions
# (i.e., expressions that can exist anywhere)
#

COMMON_EXPR := |*
  c_eof;

  # ignore and continue parsing in corresponding expression state
  ws+ => { fret; };

  line_comment; # no op

  empty_lines => {
    @in_cmd = true
    gen_token(:kNL, token: "\n")
    pop_fcall
    fnext EXPR_BEG;
    fbreak;
  };

  # ---

      # same op as operator_expr
      '!=' | '!~' | '!'
    | '===' | '==' | '=~' | '=>' | '='
    | '<=>' | '<=' | '<'
    | '>=' | '>'
    | '~'

    | '<<' | '>>' | '|' | '/' | '^' | '%'
    | '...' | '..' | ',' | '&&' | '||'

    | ( '**' | '*' | '+' | '-' | '&' %TokEnd [^.] ) % { token_type = OPERATORS }
    | op_asgn % { token_type = OPERATORS }
    | (
          nl %TokStart ws* '.' %TokEnd [^.0-9]
        | nl %TokStart ws* '&.'
        | '.'
        | '&.'
        | '::' % { token_type = OPERATORS }
      ) % { next_state = EXPR_DOT }

    | ';' % { @in_cmd = true }

    | ':' %TokEnd ( space | '#' )

    | ':' % { token_type = :tSYMBEG; next_state = EXPR_FNAME }

    | '->' % { next_state = EXPR_ENDFN }

    | '(' % { token_type = OPERATORS }
    | ')' % { next_state = EXPR_ENDFN }
    | '[' % { token_type = OPERATORS }
    | ']' % { next_state = EXPR_ENDARG }

    | '}'

    | '{' % {
        if @lpar_beg > 0 && @lpar_beg == @paren_nest
          @lpar_beg = 0
          @paren_nest -= 1
          token_type = :kLAMBEG
        end
      }

    | any_var % { next_state = EXPR_END }

    | '?' %TokEnd (

        (alnum | '_') ident_char

        # exclude '?\\\n': it resolves to '\n' as if '?\\n'
      | space % {
          i = " \n\f\r\t\v".index(current_token(ts: @ts + 1, te: @te + 1)[0])
          c = 'snfrtv'[i]
          warn "invalid character syntax; use ?\\#{c}"
        }

      | c_eof % { raise SyntaxError, "incomplete character syntax" }

    )

  => Keyword;

  # ---

  '?' => {
    pop_fcall
    fgoto CHAR;
  };

  [''""``] | ':' [''""] => StringStart;

  number => Number;

  '.' digit => { raise SyntaxError, 'no .<digit> floating literal anymore; put 0 before dot' };

  ^ident_char => { raise SyntaxError, "Invalid char `#{current_token}' in expression at #@ts" };

  any => { raise "Don't know what to do with `#{current_token}' at #@ts" };

*|;


# ##############################################################################
#
# Strings: <<Heredocs, 'strings', %w(words) and ?chars
#

action EofLiteralError { raise SyntaxError, current_literal.unterminated_message }


# ------------------------------------------------------------------------------
#
# Character escaping
#

action InvalidUnicode { raise SyntaxError, 'invalid Unicode escape' }
action UntermUnicode  { raise SyntaxError, 'unterminated Unicode escape' }

unicode_digits = xdigit{1,6} >lerr(InvalidUnicode);

unicode_escape = '\\u' xdigit{4} @lerr(InvalidUnicode)
               | '\\u{' unicode_digits '}' @lerr(UntermUnicode)
;

multi_unicode_escape = '\\u' xdigit{4} @lerr(InvalidUnicode)
                     | '\\u{' unicode_digits ([\t ] @lerr(UntermUnicode) unicode_digits)* '}' @lerr(UntermUnicode)
;

char_escape = '\\' (ascii - [CMcux0-7] - c_eof);

octal_escape = '\\' odigit{1,3};


action InvalidHex { raise SyntaxError, 'invalid hex escape' }

hex_escape   = '\\x' ( xdigit{1,2} >lerr InvalidHex );


action InvalidControl { raise SyntaxError, 'Invalid escape character syntax' }

ctrl_char = '\\' ( 'c' | 'C-' );
meta_char = '\\M-';

control_prefix = ctrl_char meta_char? | meta_char ctrl_char?;

control_escape = control_prefix (
    (ascii - '\\')
  | octal_escape
  | hex_escape
  | '\\' (ascii - [CMcux0-7])
) @lerr(InvalidControl);


# ------------------------------------------------------------------------------
#
# Heredocs
#

# Heredoc existence condition:
#     ( [EXPR_BEG, EXPR_FNAME, EXPR_LABELARG, EXPR_MID].include?(@cs) )
#  || ( [EXPR_ARG, EXPR_CMDARG].include?(@cs) && ( @ts == 0 || @data[@ts - 1] =~ / \f\t\r\v/ ) )

HEREDOC_DELIMITER := |*
  c_eof => EofLiteralError;

  ^nl_eof* nl_eof => {
    if current_literal.delimiter?(current_token)
      # found delimiter => end of heredoc
      gen_string_content_token
      gen_string_end_token
      @line_jump = @te
      fexec current_literal.restore;
      pop_fcall
      fnext EXPR_END;
      fbreak;
    end

    fexec @ts;
    fgoto HEREDOC_CONTENT;
  };

*|;

HEREDOC_CONTENT := |*
  # TODO: '\\\n' - counts as not being present, if id_delimiter != "'"

  c_eof => EofLiteralError;

  '\n' => { # don't jump yet
    current_literal.line_indent = 0

    if @line_jump > @p
      # content in @te..@line_jump isn't included
      gen_string_content_token(@te)
      current_literal.content_start = @line_jump
      fexec @line_jump;
    end

    fgoto HEREDOC_DELIMITER;
  };

  '\\' ^c_eof => { current_literal.commit_indent };

  '#' any_var => { gen_interpolation_tokens(token_type) };

  '#{' => {
    current_literal.commit_indent
    if current_literal.interpolates?
      gen_string_content_token
      gen_token(:tSTRING_DBEG)
      fnext EXPR_BEG;
      fbreak;
    end
  };

  ' ' => {
    if current_literal.dedents? && current_literal.line_indent >= 0
      current_literal.line_indent += 1
    end
  };

  '\t' => {
    if current_literal.dedents? && current_literal.line_indent >= 0
      w = current_literal.line_indent / tab_width + 1
      current_literal.line_indent = w * tab_width
    end
  };

  any => { current_literal.commit_indent };

*|;


# ------------------------------------------------------------------------------
#
# Strings
#

# ^D (0x4) isn't used by the lexer.
# The real string delimiter is replaced by ^D to generalize STRING_CONTENT.
string_delimiter = 0x4;

action StringNl {
  if @line_jump > 0
    # content in te...line_jump isn't included
    lte = current_literal.state == :WORD_CONTENT && peek(@ts) == '\\'.ord ? -1 : 0
    gen_string_content_token
    current_literal.content_start = @line_jump
    fexec @line_jump;
    fbreak;
  end
}

action StringDBeg {
  if current_literal.interpolates?
    gen_string_content_token
    gen_token(:tSTRING_DBEG)
    pop_fcall
    fnext EXPR_BEG;
    fbreak;
  end
}

action StringDVar {
  if gen_interpolation_tokens(token_type)
    fbreak;
  end
}

action StringDelimiter {
  gen_string_content_token
  if current_literal.regexp?
    regexp_delim   = @ts
    regexp_options = []
    fgoto REGEXP_END;
  end
  gen_string_end_token
  pop_fcall
  fnext EXPR_END;
  fbreak;
}

STRING_CONTENT := |*
  c_eof => EofLiteralError;
  string_delimiter => StringDelimiter;

  char_escape - '\\\n';
  octal_escape;
  hex_escape;
  multi_unicode_escape;
  control_escape;

  '\\'? '\n'  => StringNl;
  '#{'        => StringDBeg;
  '#' any_var => StringDVar;

  ^([\\\n] | c_eof | string_delimiter);
*|;


WORD_CONTENT := |*
  c_eof => EofLiteralError;

  string_delimiter => {
    if current_literal.was_content?
      gen_string_content_token
      gen_token(:tSPACE, token: '')
    end
    gen_string_end_token
    if current_literal.delimiter?('\n') && @line_jump > @p
      fexec @line_jump;
    end
    fbreak;
  };

  '\\\n' => {
    current_literal.was_content = true
    if @line_jump > @p
      gen_string_content_token(@te)
      fexec @line_jump;
      current_literal.content_start = @line_jump
      fbreak;
    end
  };

  '\\' string_delimiter => {
    current_literal.was_content = true
    if current_literal.delimiter?('\n') && @line_jump > @p
      gen_string_content_token(@te)
      fexec @line_jump;
      current_literal.content_start = @line_jump
      fbreak;
    end
  };

  '#{' % { current_literal.was_content = true } => StringDBeg;

  '#' any_var => {
    gen_interpolation_tokens(token_type)
    current_literal.was_content = true
    if current_literal.interpolates?
      fbreak;
    end
  };

  (char_escape - '\\\n' - '\\' string_delimiter) => { current_literal.was_content = true };
  octal_escape                                   => { current_literal.was_content = true };
  hex_escape                                     => { current_literal.was_content = true };
  multi_unicode_escape                           => { current_literal.was_content = true };
  control_escape                                 => { current_literal.was_content = true };
  ^('\\' | c_eof | string_delimiter | space)     => { current_literal.was_content = true };

  (
      space
    | '\n' @ {
        if @line_jump > @p
          was_content = current_literal.was_content?
          if was_content
            gen_string_content_token
            gen_token(:tSPACE, te: @p + 1)
          end
          current_literal.was_content = false
          current_literal.content_start = @line_jump
          fexec @line_jump;
          if was_content
            fbreak;
          end
        end
      }
  )+ => {
    was_content = current_literal.was_content?
    if was_content
      gen_string_content_token
      gen_token(:tSPACE)
    end
    current_literal.was_content = false
    current_literal.content_start = @te
    if was_content
      fbreak;
    end
  };

*|;


REGEXP_END := |*
  (
      'm' @ { regexp_options << :multi_line }
    | 'i' @ { regexp_options << :ignore_case }
    | 'x' @ { regexp_options << :extend }
    | 'o' @ { regexp_options << :once }
  )+;

  ( alpha - [mixo] )+ => {
    tok = current_token
    raise SyntaxError, "unknown regexp option#{tok.length == 1 ? '' : 's'} - #{tok}"
  };

  ^alpha => {
    fexec @te -= 1;
    gen_token(:tREGEXP_END, ts: regexp_delim, options: regexp_options.uniq.sort);
    fnext EXPR_END;
    fbreak;
  };
*|;


# ------------------------------------------------------------------------------
#
# Single characters (e.g.: ?a)
#

CHAR := |*
  c_eof => { raise SyntaxError, 'incomplete character syntax' };

    char_escape
  | unicode_escape
  | octal_escape
  | hex_escape
  | control_escape
  | ^c_eof
  => {
    gen_token(:tCHAR)
    fnext EXPR_END;
    fbreak;
  };

*|;

}%%
#%